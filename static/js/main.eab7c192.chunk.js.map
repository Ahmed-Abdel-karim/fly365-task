{"version":3,"sources":["components/useAsync/useAsync.js","api/index.js","components/errorMessage/ErrorMessage.js","components/spinner/Spinner.js","components/onloading/Onloading.js","utils/score.js","components/hotelsListItem/HotelsListItem.js","components/button/Button.js","components/gallery/Gallery.js","components/pagination/Pagination.js","components/useDataStore/useDataStore.js","components/sortButton/SortButton.js","components/Review/Reviews.js","components/hotelDetails/HotelDetails.js","components/hotelsList/HotelsList.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["useAsync","func","defaultData","initalState","isLoading","data","resolved","rejected","error","useState","setLoadingFlags","asyncFn","Promise","resolve","then","catch","reject","BASE_URL","fetchHotelsUrl","fetchHotelDetailsUrl","fetchHotelsList","axios","get","fetchHotelDetails","hotelId","replace","ErrorMessageContext","React","createContext","EMProvider","Provider","ErrorMessageProvider","children","message","setErrorMessage","value","ErrorMessage","useContext","className","role","Spinner","OnLoading","useEffect","rating","ScoreRating","to","from","HotelsListItem","score","nights","isSelected","selectHotel","name","photo","id","pricePerNight","totalReviews","totalScore","handleSelectHotel","useCallback","totalCost","useMemo","Number","title","onClick","src","width","alt","Object","entries","reduce","res","Infinity","Button","props","active","otherProps","Gallery","pictures","activeId","setActive","thumbnailOverflowSetp","setThumbnailOverflow","photosContainerRef","useRef","acc","index","thumbnail","photos","push","thumbnails","nextHandler","length","previousHandler","thumbnailClickhandler","current","containerWidth","offsetWidth","thumWidth","ref","data-testid","aria-label","style","transform","map","key","justifyContent","Pagination","pageSize","totalCount","page","handleChangePage","itemsInPageCount","paginationButtons","setButtons","pageChangehandler","e","target","pagesCount","Math","ceil","allPagesArray","Array","keys","x","BUTTONS_RANGE","slice","startFrom","includes","pageNumber","sortTypeEnum","sortData","property","type","sort","a","b","paginate","useDataStore","sortBy","reducer","sortFn","state","action","payload","sortType","sourceData","pageData","Error","initialState","useReducer","dispatch","limit","handleSort","SortButton","currentSort","sortHandler","Reviews","reviews","reviewsList","i","review","HotelDetails","setNights","fetchDetails","handlechangeNights","round","onChange","min","max","step","HotelsList","list","hotel","Main","hotelsList","fetchList","otherLoadingProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eab7c192.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst useAsync = (func, defaultData) => {\n  const initalState = {\n    isLoading: false,\n    data: defaultData,\n    resolved: false,\n    rejected: false,\n    error: \"\"\n  };\n  const [\n    { isLoading, data, error, resolved, rejected },\n    setLoadingFlags\n  ] = useState(initalState);\n  const asyncFn = (...args) => {\n    if (isLoading) return Promise.resolve(\"isLoading\");\n    setLoadingFlags({ ...initalState, isLoading: true });\n    return func(...args)\n      .then(({ data }) => {\n        setLoadingFlags({\n          ...initalState,\n          isLoading: false,\n          resolved: true,\n          data\n        });\n        Promise.resolve(data);\n      })\n      .catch(error => {\n        setLoadingFlags({\n          ...initalState,\n          isLoading: false,\n          rejected: true,\n          error: \"error occurred please try again later\"\n        });\n        Promise.reject(error);\n      });\n  };\n  return {\n    isLoading,\n    resolved,\n    rejected,\n    data,\n    error,\n    asyncFn\n  };\n};\n\nexport default useAsync;\n","import axios from \"axios\";\n\nconst BASE_URL = \"http://my-json-server.typicode.com/fly365com/code-challenge\";\n\nconst fetchHotelsUrl = `${BASE_URL}/hotels`;\nconst fetchHotelDetailsUrl = `${BASE_URL}/hotelDetails/{id}`;\n\nconst fetchHotelsList = () => axios.get(fetchHotelsUrl);\nconst fetchHotelDetails = hotelId =>\n  axios.get(fetchHotelDetailsUrl.replace(\"{id}\", hotelId));\n\nexport { fetchHotelsList, fetchHotelDetails };\n","import React, { useState, useContext } from \"react\";\nimport \"./error-message.scss\";\n\nconst ErrorMessageContext = React.createContext({});\nconst EMProvider = ErrorMessageContext.Provider;\n\nconst ErrorMessageProvider = ({ children }) => {\n  const [message, setErrorMessage] = useState(\"\");\n  return (\n    <EMProvider\n      value={{\n        message,\n        setErrorMessage\n      }}\n    >\n      {children}\n    </EMProvider>\n  );\n};\n\nconst ErrorMessage = () => {\n  const { message } = useContext(ErrorMessageContext);\n  return (\n    <>\n      {!!message && (\n        <div className=\"error-message\">\n          <div className=\"alert alert-danger\" role=\"alert\">\n            {message}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport { ErrorMessage as default, ErrorMessageContext, ErrorMessageProvider };\n","import React from \"react\";\nimport \"./spinner.scss\";\n\nconst Spinner = ({ className = \"\" }) => (\n  <div className={`spinner ${className}`}>\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n\nexport default Spinner;\n","import React, { useContext, useEffect } from \"react\";\nimport { ErrorMessageContext } from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nconst OnLoading = ({ isLoading, error, rejected, children, resolved }) => {\n  const { setErrorMessage } = useContext(ErrorMessageContext);\n  useEffect(() => {\n    if (rejected) return setErrorMessage(error);\n    return setErrorMessage(\"\");\n  }, [rejected, error]);\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {resolved && children}\n    </>\n  );\n};\n\nexport default OnLoading;\n","const rating = {\n  BAD: \"bad\",\n  FAIR: \"fair\",\n  GOOD: \"good\",\n  VERY_GOOD: \"very good\",\n  EXCELLENT: \"excellent\"\n};\n\nconst ScoreRating = {\n  [rating.BAD]: {\n    to: 5\n  },\n  [rating.FAIR]: {\n    from: 5,\n    to: 6\n  },\n  [rating.GOOD]: {\n    from: 6,\n    to: 7\n  },\n  [rating.VERY_GOOD]: {\n    from: 7,\n    to: 8\n  },\n  [rating.EXCELLENT]: {\n    from: 8\n  }\n};\n\nconst getScoreRating = score =>\n  Object.entries(ScoreRating).reduce((res, [rating, { to, from }]) => {\n    const max = to || Infinity;\n    const min = from || 0;\n    return score >= min && score < max ? (res = rating) : res;\n  }, \"\");\n\nexport { getScoreRating, rating };\n","import React, { useCallback, useMemo } from \"react\";\nimport \"./hotels-list-item.scss\";\nimport { getScoreRating } from \"../../utils/score\";\n\nconst HotelsListItem = ({ data, nights, isSelected, selectHotel }) => {\n  const { name, photo, id, pricePerNight, totalReviews, totalScore } = data;\n  const handleSelectHotel = useCallback(() => {\n    selectHotel(id);\n  }, [id, selectHotel]);\n  const totalCost = useMemo(() => Number(pricePerNight) * Number(nights), [\n    pricePerNight,\n    nights\n  ]);\n  return (\n    <li\n      className=\"hotels-list-item col-sm-12 col-md-6 col-lg-4\"\n      title={name}\n    >\n      <button\n        className={`item-container rounded ${\n          isSelected ? \"shadow\" : \"shadow-sm\"\n        }`}\n        onClick={handleSelectHotel}\n      >\n        <h2 className=\"item-title\">{name}</h2>\n        <div className=\"row\">\n          <div className=\"col-5 img-container \">\n            <img src={photo} width=\"100%\" alt={`${name} phote`} />\n          </div>\n          <div className=\"col-7 info-container \">\n            <p>{`$ ${totalCost} for ${nights} night`}</p>\n            <p>{`${totalScore} ${getScoreRating(totalScore)}`}</p>\n            <p>{`${totalReviews} review`}</p>\n          </div>\n        </div>\n      </button>\n    </li>\n  );\n};\n\nexport default HotelsListItem;\n","import React from \"react\";\nimport \"./button.scss\";\n\nconst Button = props => {\n  const { onClick, value, active, children, className, ...otherProps } = props;\n  return (\n    <button\n      value={value}\n      onClick={onClick}\n      className={`button ${active ? \"active\" : \"\"} ${className}`}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport \"./gallery.scss\";\nimport Button from \"../button/Button\";\n\nconst Gallery = ({ pictures }) => {\n  const [activeId, setActive] = useState(0);\n  const [thumbnailOverflowSetp, setThumbnailOverflow] = useState(0);\n  const photosContainerRef = useRef();\n\n  const { photos, thumbnails } = pictures.reduce(\n    (acc, { photo, thumbnail }, index) => {\n      acc.photos.push({ id: index, photo });\n      acc.thumbnails.push({ id: index, thumbnail });\n      return acc;\n    },\n    { photos: [], thumbnails: [] }\n  );\n  const nextHandler = useCallback(() => {\n    setActive(activeId => (activeId < photos.length - 1 ? activeId + 1 : 0));\n  }, [photos.length]);\n  const previousHandler = useCallback(() => {\n    setActive(activeId => (activeId > 0 ? activeId - 1 : photos.length - 1));\n  }, [photos.length]);\n\n  const thumbnailClickhandler = useCallback(id => {\n    setActive(id);\n  }, []);\n\n  useEffect(() => {\n    if (photosContainerRef.current) {\n      const containerWidth = photosContainerRef.current.offsetWidth;\n      const thumWidth = thumbnails.length * 104;\n      setThumbnailOverflow(\n        thumWidth > containerWidth ? thumWidth / thumbnails.length : 0\n      );\n    }\n  }, [thumbnails.length, photosContainerRef.current]);\n\n  return (\n    <div className=\"gallery\">\n      <div className=\"photos\" ref={photosContainerRef}>\n        <Button\n          data-testid=\"previous\"\n          onClick={previousHandler}\n          className=\"round btn-control left\"\n          aria-label=\"previous\"\n        >\n          &larr;\n        </Button>\n        <Button\n          data-testid=\"next\"\n          onClick={nextHandler}\n          className=\"round btn-control right\"\n          aria-label=\"next\"\n        >\n          &rarr;\n        </Button>\n        <div\n          className=\"photos-container\"\n          data-testid=\"photos-container\"\n          style={{\n            width: `${photos.length * 100}%`,\n            transform:\n              activeId > 0\n                ? `translateX(-${(activeId * 100) / photos.length}%)`\n                : `translateX(0%)`\n          }}\n        >\n          {photos.map(({ photo, id }) => (\n            <img\n              src={photo}\n              key={id}\n              width={`${100 / photos.length}%`}\n              alt=\"gallery item\"\n              title=\"gallery-photo\"\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"thumbnails\">\n        <div\n          className=\"thumbnails-container\"\n          style={{\n            justifyContent: thumbnailOverflowSetp > 0 ? \"flex-start\" : \"center\",\n            transform:\n              thumbnailOverflowSetp > 0\n                ? `translateX(-${activeId * thumbnailOverflowSetp}px)`\n                : \"\"\n          }}\n        >\n          {thumbnails.map(({ thumbnail, id }) => {\n            return (\n              <button\n                title=\"gallery-thumbnail\"\n                onClick={() => thumbnailClickhandler(id)}\n                key={id}\n              >\n                <img\n                  src={thumbnail}\n                  className={activeId === id ? \"active\" : \"\"}\n                  alt=\"gallery item\"\n                />\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Gallery;\n","import React, { useCallback, useMemo, useState, useEffect } from \"react\";\nimport Button from \"../button/Button\";\nimport \"./pagination.scss\";\n\nconst BUTTONS_RANGE = 2;\n\nconst Pagination = ({\n  pageSize,\n  totalCount,\n  page,\n  handleChangePage,\n  itemsInPageCount\n}) => {\n  const [paginationButtons, setButtons] = useState([]);\n  const pageChangehandler = useCallback(e => {\n    const {\n      target: { value }\n    } = e;\n    handleChangePage(Number(value));\n  }, []);\n\n  const pagesCount = useMemo(() => Math.ceil(totalCount / pageSize), [\n    pageSize,\n    totalCount\n  ]);\n\n  useEffect(() => {\n    const allPagesArray = Array.from(new Array(pagesCount).keys(), x => x + 1);\n    if (pagesCount - page > BUTTONS_RANGE && page > BUTTONS_RANGE / 2) {\n      return setButtons(\n        allPagesArray.slice(page - BUTTONS_RANGE / 2, page + BUTTONS_RANGE / 2)\n      );\n    }\n    return setButtons(allPagesArray.slice(0, page + BUTTONS_RANGE));\n  }, [page, pagesCount]);\n\n  const startFrom = useMemo(() => (page - 1) * pageSize, [page, pageSize]);\n\n  return (\n    <nav aria-label=\"page navigation\" className=\"pagination\">\n      <p className=\"font-weight-bold\">\n        <span>{startFrom + 1}</span> <span>-</span>{\" \"}\n        <span>{startFrom + itemsInPageCount}</span> <span>of</span>{\" \"}\n        <span>{totalCount}</span>\n      </p>\n      {pagesCount > 1 && (\n        <ul className=\"pagination\">\n          {page > 1 && (\n            <li aria-label=\"previous\">\n              <Button value={page - 1} onClick={pageChangehandler}>\n                &lt;\n              </Button>\n            </li>\n          )}\n          {/* show first page button only when it is not in the range */}\n          {!paginationButtons.includes(1) && (\n            <>\n              <li>\n                <Button\n                  value={1}\n                  onClick={pageChangehandler}\n                  active={page === 1}\n                >\n                  1\n                </Button>\n              </li>\n              <span className=\"separator\">...</span>\n            </>\n          )}\n          {paginationButtons.map(pageNumber => (\n            <li title={pageNumber} key={pageNumber}>\n              <Button\n                className=\"page-link\"\n                value={pageNumber}\n                onClick={pageChangehandler}\n                active={page === pageNumber}\n              >\n                {pageNumber}\n              </Button>\n            </li>\n          ))}\n          {/* show last page button only when it is not in the range */}\n          {!paginationButtons.includes(pagesCount) && (\n            <>\n              <span className=\"separator\">...</span>\n              <li>\n                <Button\n                  className=\"page-link\"\n                  value={pagesCount}\n                  onClick={pageChangehandler}\n                >\n                  {pagesCount}\n                </Button>\n              </li>\n            </>\n          )}\n          {page < pagesCount && (\n            <li title={page + 1} aria-label=\"next\">\n              <Button\n                className=\"page-link\"\n                value={page + 1}\n                onClick={pageChangehandler}\n                page={page}\n              >\n                &gt;\n              </Button>\n            </li>\n          )}\n        </ul>\n      )}\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import { useReducer, useCallback, useMemo } from \"react\";\nconst SORT = \"SORT\";\nconst CHANGE_PAGE = \"CHANGE_PAGE\";\nconst sortTypeEnum = {\n  ASC: \"ASC\",\n  DESC: \"DESC\"\n};\n\nconst sortData = property => (data, type) =>\n  type === sortTypeEnum.ASC\n    ? data.sort((a, b) => a[property] - b[property])\n    : data.sort((a, b) => b[property] - a[property]);\n\nconst paginate = (data, page, pageSize) =>\n  data.slice((page - 1) * pageSize, page * pageSize);\n\nconst dataReducer = sortFn => (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SORT:\n      return {\n        ...state,\n        sortType: payload,\n        sourceData: sortFn(state.sourceData, payload)\n      };\n    case CHANGE_PAGE:\n      return {\n        ...state,\n        page: payload,\n        pageData: paginate(state.sourceData, payload, state.pageSize)\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst useDataStore = (data, sortBy, pageSize) => {\n  const reducer = useMemo(() => dataReducer(sortData(sortBy)), [sortBy]);\n  //\n  const initialState = useMemo(() => {\n    // sort data with the default sort\n    const sourceData = sortData(sortBy)(data, sortTypeEnum.DESC);\n    const pageData = paginate(sourceData, 1, pageSize);\n    const initialState = {\n      sortType: sortTypeEnum.DESC,\n      page: 1,\n      pageSize,\n      sourceData,\n      pageData\n    };\n    return initialState;\n  }, []);\n  //\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { pageData, sourceData, sortType, page, pageSize: limit } = state;\n\n  // actions\n  const handleSort = useCallback(sortType => {\n    dispatch({\n      type: SORT,\n      payload: sortType\n    });\n    // start from first page when sortnig\n    dispatch({\n      type: CHANGE_PAGE,\n      payload: 1\n    });\n  }, []);\n  const handleChangePage = useCallback(page => {\n    dispatch({\n      type: CHANGE_PAGE,\n      payload: page\n    });\n  }, []);\n  //\n\n  return {\n    handleSort,\n    handleChangePage,\n    totalCount: sourceData.length,\n    page,\n    pageData,\n    pageSize: limit,\n    sortType\n  };\n};\n\nexport { useDataStore as default, sortTypeEnum };\n","import React, { useCallback } from \"react\";\nimport { sortTypeEnum } from \"../useDataStore/useDataStore\";\nimport Button from \"../button/Button\";\nimport \"./sort-button.scss\";\n\nconst SortButton = ({ currentSort, handleSort }) => {\n  const sortHandler = useCallback(() => {\n    currentSort === sortTypeEnum.ASC\n      ? handleSort(sortTypeEnum.DESC)\n      : handleSort(sortTypeEnum.ASC);\n  }, [currentSort, handleSort]);\n  return (\n    <>\n      {currentSort === sortTypeEnum.ASC ? (\n        <Button\n          title=\"sort\"\n          className=\"rounded sort-button\"\n          onClick={sortHandler}\n        >\n          &uarr;\n        </Button>\n      ) : (\n        <Button\n          title=\"sort\"\n          className=\"rounded sort-button\"\n          onClick={sortHandler}\n        >\n          &darr;\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default SortButton;\n","import React from \"react\";\nimport Pagination from \"../pagination/Pagination\";\nimport useDataStore from \"../useDataStore/useDataStore\";\nimport SortButton from \"../sortButton/SortButton\";\nimport \"./reviews.scss\";\n\nconst Reviews = ({ reviews }) => {\n  const {\n    handleSort,\n    handleChangePage,\n    pageData: reviewsList,\n    page,\n    pageSize,\n    totalCount,\n    sortType\n  } = useDataStore(reviews, \"score\", 3);\n\n  return (\n    <section className=\"rounded p-3 reviews\">\n      <header className=\"d-flex align-items-center mb-4\">\n        <h3 className=\"mb-0 mr-3\">Reviews</h3>\n        <SortButton currentSort={sortType} handleSort={handleSort} />\n      </header>\n      <ul className=\"reviews-list\">\n        {reviewsList.map(({ review, score }, i) => {\n          return (\n            <li key={`${review}-${i}`}>\n              <p className=\"review clearfix\">\n                <span className=\"score\">{score}</span>\n                <span>{review}</span>\n              </p>\n            </li>\n          );\n        })}\n      </ul>\n      <Pagination\n        handleChangePage={handleChangePage}\n        page={page}\n        pageSize={pageSize}\n        totalCount={totalCount}\n        itemsInPageCount={reviewsList.length}\n      />\n    </section>\n  );\n};\n\nexport default Reviews;\n","import React, { useEffect, useCallback } from \"react\";\nimport useAsync from \"../useAsync/useAsync\";\nimport { fetchHotelDetails } from \"../../api\";\nimport OnLoading from \"../onloading/Onloading\";\n\nimport \"./hotel-details.scss\";\nimport Gallery from \"../gallery/Gallery\";\nimport Reviews from \"../Review/Reviews\";\n\nconst HotelDetails = ({ hotelId, setNights, nights }) => {\n  const { asyncFn: fetchDetails, data, ...otherProps } = useAsync(\n    fetchHotelDetails,\n    {}\n  );\n  useEffect(() => {\n    fetchDetails(hotelId);\n  }, [hotelId]);\n\n  const { name, pictures, reviews } = data;\n\n  const handlechangeNights = useCallback(e => {\n    const {\n      target: { value }\n    } = e;\n    if (value) e.target.value = Math.round(value);\n    if (value > 365) e.target.value = 365;\n    return setNights(e.target.value);\n  }, []);\n\n  return (\n    <div className=\"hotel-details\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div className=\"shadow details-container\">\n            <OnLoading {...otherProps}>\n              <div className=\"py-3 px-4\">\n                <header>\n                  <h2 className=\"title\">{name}</h2>\n                  <span>For</span>{\" \"}\n                  <input\n                    className=\"input\"\n                    name=\"nights\"\n                    onChange={handlechangeNights}\n                    value={nights}\n                    type=\"number\"\n                    min={1}\n                    max={365}\n                    step=\"1\"\n                  />{\" \"}\n                  <span>Nights</span>\n                </header>\n              </div>\n              <div className=\"p-2 p-md-5\">\n                <Gallery pictures={pictures} />\n              </div>\n              <div className=\"p-2 p-md-5\">\n                <Reviews reviews={reviews} />\n              </div>\n            </OnLoading>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HotelDetails;\n","import React, { useState } from \"react\";\nimport \"./hotels-list.scss\";\nimport HotelsListItem from \"../hotelsListItem/HotelsListItem\";\nimport HotelDetails from \"../hotelDetails/HotelDetails\";\n\nconst HotelsList = props => {\n  const [nights, setNights] = useState(1);\n  const [hotelId, selectHotel] = useState();\n  return (\n    <>\n      <ul className=\"row hotels-list\">\n        {props.list.map(hotel => (\n          <HotelsListItem\n            data={hotel}\n            key={hotel.id}\n            nights={nights}\n            isSelected={hotelId === hotel.id}\n            selectHotel={selectHotel}\n          />\n        ))}\n      </ul>\n      <div className=\"py-2\">\n        {hotelId && (\n          <HotelDetails\n            hotelId={hotelId}\n            setNights={setNights}\n            nights={nights}\n          />\n        )}\n      </div>\n    </>\n  );\n};\nexport default HotelsList;\n","import React, { useEffect } from \"react\";\nimport useAsync from \"../useAsync/useAsync\";\nimport { fetchHotelsList } from \"../../api\";\nimport OnLoading from \"../onloading/Onloading\";\nimport HotelsList from \"../hotelsList/HotelsList\";\n\nimport \"./main.scss\";\n\nfunction Main() {\n  const {\n    data: hotelsList,\n    asyncFn: fetchList,\n    ...otherLoadingProps\n  } = useAsync(fetchHotelsList, []);\n  useEffect(() => {\n    fetchList();\n  }, []);\n  return (\n    <main className=\"main\">\n      <OnLoading {...otherLoadingProps}>\n        <div className=\"container\">\n          <div className=\"pt-5\">\n            <HotelsList list={hotelsList} />\n          </div>\n        </div>\n      </OnLoading>\n    </main>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./styles/app.scss\";\nimport Main from \"./components/main/Main\";\nimport ErrorMessage, {\n  ErrorMessageProvider\n} from \"./components/errorMessage/ErrorMessage\";\n\nfunction App() {\n  return (\n    <ErrorMessageProvider>\n      <ErrorMessage />\n      <Main />\n    </ErrorMessageProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}